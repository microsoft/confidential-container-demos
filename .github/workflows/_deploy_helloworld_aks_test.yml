name: Deploy Hello World AKS Test

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        description: "AKS Cluster Name"
        type: string
      helloworld-image:
        required: true
        description: "The Hello World image to use"
        type: string
      workflow-id:
        description: "Workflow ID"
        required: true
        type: string

jobs:
  deploy-helloworld-aks-test:
    name: Deploy Hello World AKS Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Public Azure Container Registry
        if: github.event_name != 'pull_request'
        run: az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }}

      - name: Log in to Test Azure Container Registry
        if: github.event_name == 'pull_request'
        run: az acr login --name ${{ secrets.TEST_AZURE_REGISTRY_NAME }}

      - name: Install Dependencies
        id: install-dependencies
        run: |
            result=$(az extension list -o table  2>&1 || true)
            if [[ $result == *"confcom"* ]]; then
              echo "confcom already installed, upgrading confcom version."
              az extension update --name confcom
            else
              echo "confcom extension not found. Installing confcom..."
              az extension add --name confcom
            fi

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --fail-with-body
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
            kubectl version 2>&1 || true

      - name: Setup Hello World Image Environment Variable
        run: |
            # check if official image
            if [[ "${{ inputs.helloworld-image }}" == *"mcr.microsoft.com"* ]]; then
              echo HELLO_WORLD_IMAGE='${{ inputs.helloworld-image }}' >> $GITHUB_ENV
            else
              echo HELLO_WORLD_IMAGE='${{ (github.event_name != 'pull_request' && secrets.AZURE_REGISTRY_URL) || secrets.TEST_AZURE_REGISTRY_URL }}'/'${{ inputs.helloworld-image }}' >> $GITHUB_ENV
            fi

      - name: Substitute Environment Variables
        id: substitute-envs
        run: |
            python util/env_substitution.py --file hello-world/AKS/helloworld.yaml --file-type yaml

      - name: Deploy Workload
        env:
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
        id: deploy-workload
        run: |
          az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP  --overwrite-existing
          cd hello-world/AKS

          echo "Containerd Status"
          systemctl status containerd
          echo "Check toml File Status"
          sudo cat /etc/containerd/config.toml
          echo "Replace toml File Content"
          sudo sed -i 's/disabled_plugins = \["cri"\]/disabled_plugins = \[\]/' /etc/containerd/config.toml
          echo "Check toml File Status Again"
          sudo cat /etc/containerd/config.toml
          echo "Restart Containerd"
          sudo systemctl restart containerd
          echo "Sleep for 60 Seconds"
          sleep 60
          echo "Check to see whether containerd is running"
          sudo systemctl is-active containerd

          az confcom katapolicygen -y helloworld.yaml
          kubectl apply -f helloworld.yaml
          kubectl apply -f service.yaml
          # give time for the service to be running
          sleep 30