name: Test Workload

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        description: "AKS Cluster Name"
        type: string

jobs:
  test-workload:
    name: Test Workload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Dependencies
        id: install-dependencies
        run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --fail-with-body
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
            kubectl version 2>&1 || true

      - name: Test Workload
        env:
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
        id: test-workload
        run: |
          az aks get-credentials --name $CLUSTER_NAME  --resource-group $RESOURCE_GROUP  --overwrite-existing

          echo "Wait for pod readiness before checking expected Kafka message."
          kubectl wait --for=condition=ready pod/kafka-golang-consumer --timeout=180s || {
            echo "Consumer is not ready within the acceptable time range. Printing out kubectl describe output."
            echo $(kubectl describe pod kafka-golang-consumer)
            exit 1
          }

          kubectl wait --for=condition=ready pod/kafka-producer --timeout=180s || {
            echo "Producer is not ready within the acceptable time range. Printing out kubectl describe output."
            echo $(kubectl describe pod kafka-producer)
            exit 1
          }

          kubectl logs kafka-producer
          kubectl logs kafka-golang-consumer -c skr

          max_retries=5
          retries=0
          while [ $retries -lt $max_retries ]; do
              echo "Querying for the decrypted message from the Kafka Consumer"
              result=$(kubectl logs kafka-golang-consumer -c kafka-golang-consumer)

              if [[ $result == *"Azure Confidential Computing"* ]]; then
                  echo "Returned result is $result"
                  echo "Found decrypted message, workload is successful."
                  break  # Exit the loop on successful attempt
              else
                  echo "Returned result is $result"
                  echo "Returned result does not contain text that indicates successful execution, retrying in 5 seconds..."
                  retries=$((retries+1))
                  sleep 5
              fi
          done

          if [ $retries -eq $max_retries ]; then
            echo "The operation has been tried $retries times without success."
            exit 1
          fi
