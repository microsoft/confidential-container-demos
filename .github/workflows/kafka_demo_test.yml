name: Kafka Demo Test 

on:
  pull_request:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      sidecar-registry:
        description: "The registry to get the image from"
        required: true
        type: choice
        default: mcr.microsoft.com
        options: 
          - mcr.microsoft.com
          - confidentialsidecars.azurecr.io
      key-release-image:
        description: "The image of the SKR sidecar to use"
        required: true
        default: "aci/skr:2.7"
        type: string
      consumer-image: 
        description: "Consumer Image"
        default: "mcr.microsoft.com/acc/samples/kafka/consumer:1.0"
        required: true
        type: string
      producer-image: 
        description: "Producer Image"
        default: "mcr.microsoft.com/acc/samples/kafka/producer:1.0"
        required: true
        type: string
  merge_group:
    branches:
      - main

jobs:
  prepare:
    name: Extract Environment Variables
    runs-on: ubuntu-latest
    outputs:
      key-release-image: ${{ steps.extract-envs.outputs.key-release-image }}
      workflow-id: ${{ steps.generate-id.outputs.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Workflow ID
        id: generate-id
        run: echo "id=$(openssl rand -hex 8 | tr -d '\n')" >> $GITHUB_OUTPUT

      - name: Extract Envs 
        id: extract-envs
        run: | 
          echo "Extracting Environment Variables"
          echo "Triggering event is ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "key-release-image=mcr.microsoft.com/aci/skr:2.7" >> $GITHUB_OUTPUT
          else
            echo "key-release-image=${{ format('{0}/{1}', inputs.sidecar-registry, inputs.key-release-image) }}" >> $GITHUB_OUTPUT
          fi

  push_images:
    name: Push Images to Private Registry for Testing
    needs: [prepare]
    uses: ./.github/workflows/_push_image.yml
    if: github.event_name == 'pull_request'
    secrets: inherit
    strategy:
      matrix:
        image: ["kafka/consumer", "kafka/producer"]
    with:
      image_tag: ${{ needs.prepare.outputs.workflow-id }}
      image: ${{ matrix.image }}
      repo_type: private
      docker_context: ${{ matrix.image }}

  create-aks-cluster:
    name: Create AKS Cluster
    needs: [prepare, push_images]
    uses: ./.github/workflows/_create_aks_cluster.yml
    if: always() && (needs.push_images.result != 'failure')
    secrets: inherit
    with: 
      workflow-id:  ${{ needs.prepare.outputs.workflow-id }}
  
  setup-aks-cluster:
    name: Setup AKS Cluster
    needs: [prepare, push_images, create-aks-cluster]
    uses: ./.github/workflows/_setup_aks_cluster.yml
    if: always() && (needs.push_images.result != 'failure')
    secrets: inherit
    with: 
      cluster-name: ${{ needs.create-aks-cluster.outputs.cluster-name }}
 
  deploy-kafka-test: 
    name: Deploy Kafka Demo Test 
    uses: ./.github/workflows/_deploy_kafka_test.yml
    needs: [prepare, push_images, create-aks-cluster, setup-aks-cluster]
    if: always() && (needs.push_images.result != 'failure')
    secrets: inherit 
    with: 
      cluster-name: ${{ needs.create-aks-cluster.outputs.cluster-name }}
      key-release-image: ${{ needs.prepare.outputs.key-release-image }}
      consumer-image: ${{ inputs.consumer-image }}
      producer-image: ${{ inputs.producer-image }}
      workflow-id: ${{ needs.prepare.outputs.workflow-id }}

  test-workload: 
    name: Test Workload 
    uses: ./.github/workflows/_test_workload.yml
    needs: [prepare, push_images, create-aks-cluster, setup-aks-cluster, deploy-kafka-test]
    if: always() && (needs.push_images.result != 'failure')
    secrets: inherit 
    with: 
      cluster-name: ${{ needs.create-aks-cluster.outputs.cluster-name }}

  cleanup: 
    name: Clean Up
    if: always() && (needs.push_images.result != 'failure')
    uses: ./.github/workflows/_cleanup.yml
    needs: [prepare, push_images, create-aks-cluster, setup-aks-cluster, deploy-kafka-test, test-workload]
    secrets: inherit

  

