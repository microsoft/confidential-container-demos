name: Deploy Kafka Test

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        description: AKS Cluster Name
        type: string
      key-release-image: 
        required: true 
        description: "The image of the SKR sidecar to use"
        type: string
      consumer-image: 
        description: "Consumer Image"
        required: true
        type: string
      producer-image: 
        description: "Producer Image"
        required: true
        type: string
jobs:
  deploy-kafka:
    name: Deploy Kafka Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Log into Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            
      - name: Install Dependencies 
        id: install-dependencies 
        run: |
            result=$(az extension list -o table  2>&1 || true)
            if [[ $result == *"confcom"* ]]; then
              echo "confcom already installed, upgrading confcom version."
              az extension update --name confcom
            else
              echo "confcom extension not found. Installing confcom..."
              az extension add --name confcom
            fi

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --fail-with-body 
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
            kubectl version 2>&1 || true

      - name: Run Workload
        env:
          AZURE_AKV_RESOURCE_ENDPOINT: ${{ secrets.SKR_CLIENT_AKV_ENDPOINT }}
          MAA_ENDPOINT: ${{ secrets.SKR_CLIENT_MAA_ENDPOINT }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }} 
          SIDECAR_IMAGE: ${{ inputs.key-release-image }}
          CONSUMER_IMAGE: ${{ inputs.consumer-image }}
          PRODUCER_IMAGE: ${{ inputs.producer-image }}
        id: run-workload
        run: | 
          az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP  --overwrite-existing
          cd main/kafka
          chmod +x test-setup.sh
          bash test-setup.sh kafka-demo-pipeline $AZURE_AKV_RESOURCE_ENDPOINT

          sleep 2
          PRODUCER_IMAGE=$(echo $PRODUCER_IMAGE | sed 's/\//\\\//g')
          sed -i 's/$EVENTHUB_NAMESPACE/'"$EVENTHUB_NAMESPACE"'/g; s/$EVENTHUB/'"$EVENTHUB"'/g; s/$PRODUCER_IMAGE/'"$PRODUCER_IMAGE"'/g ' producer/producer.yaml
          awk '{printf "%s", $0; if (NR > 1) printf "auniqueidentifier"} END {print ""}' kafka-demo-pipeline-pub.pem > kafka-demo-pipeline-pub-temp.pem
          cat kafka-demo-pipeline-pub-temp.pem
          export PUBKEY=$(kafka-demo-pipeline-pub-temp.pem)
          PUBKEY=$(echo $PUBKEY | sed 's/\//\\\//g')
          sed -i "s/\$PUBKEY/${PUBKEY}/g" producer/producer.yaml
          sed -i 's/auniqueidentifier/\n/g ' producer/producer.yaml
          sed -i 's/-----BEGIN PUBLIC KEY-----/-----BEGIN PUBLIC KEY-----\n/g ' producer/producer.yaml
          sed -i '25s/^/            /' producer/producer.yaml
          sed -i '26s/^/            /' producer/producer.yaml
          sed -i '27s/^/            /' producer/producer.yaml
          sed -i '28s/^/            /' producer/producer.yaml
          sed -i '29s/^/            /' producer/producer.yaml
          sed -i '30s/^/            /' producer/producer.yaml
          sed -i '31s/^/            /' producer/producer.yaml
          sed -i '32s/^/            /' producer/producer.yaml
          sed -i '33s/^/            /' producer/producer.yaml
          sed -i '34s/^/            /' producer/producer.yaml
          cat producer/producer.yaml


          kubectl apply -f consumer/consumer.yaml 2>&1
          sleep 10
          kubectl apply -f producer/producer.yaml 2>&1
          sleep 10

          
      
