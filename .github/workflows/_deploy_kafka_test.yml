name: Deploy Kafka Test

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        description: "AKS Cluster Name"
        type: string
      key-release-image:
        required: true
        description: "The image of the SKR sidecar to use"
        type: string
      consumer-image:
        description: "Consumer Image"
        required: true
        type: string
      producer-image:
        description: "Producer Image"
        required: true
        type: string
    outputs:
      skr-client-kid:
        description: SKR key id
        value: ${{ jobs.deploy-kafka.outputs.skr-client-kid }}
jobs:
  deploy-kafka:
    name: Deploy Kafka Test
    runs-on: ubuntu-22.04
    outputs:
      skr-client-kid: ${{ steps.run-workload.outputs.skr-client-kid }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Registry
        run: |
          echo "AZURE_REG_NAME=${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }}" >> $GITHUB_ENV
          echo "AZURE_REG_URL=${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_URL || secrets.AZURE_REGISTRY_URL }}" >> $GITHUB_ENV

      - name: Log in to Azure Container Registry
        run: az acr login --name $AZURE_REG_NAME

      - name: Install Dependencies
        id: install-dependencies
        run: |
            result=$(az extension list -o table  2>&1 || true)
            if [[ $result == *"confcom"* ]]; then
              echo "confcom already installed, upgrading confcom version."
              az extension update --name confcom
            else
              echo "confcom extension not found. Installing confcom..."
              az extension add --name confcom
            fi

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --fail-with-body
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
            kubectl version 2>&1 || true

      - name: Run Workload
        env:
          AZURE_AKV_RESOURCE_ENDPOINT: ${{ secrets.SKR_CLIENT_AKV_ENDPOINT }}
          MAA_ENDPOINT: ${{ secrets.SKR_CLIENT_MAA_ENDPOINT }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
          SIDECAR_IMAGE: ${{ inputs.key-release-image }}
          CONSUMER_IMAGE: ${{ env.AZURE_REG_URL }}/${{ inputs.consumer-image }}
          PRODUCER_IMAGE: ${{ env.AZURE_REG_URL }}/${{ inputs.producer-image }}
        id: run-workload
        run: |
          az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP  --overwrite-existing
          cd main/kafka

          echo "Containerd Status"
          systemctl status containerd
          echo "Check toml File Status"
          sudo cat /etc/containerd/config.toml
          echo "Replace toml File Content"
          sudo sed -i 's/disabled_plugins = \["cri"\]/disabled_plugins = \[\]/' /etc/containerd/config.toml
          echo "Check toml File Status Again"
          sudo cat /etc/containerd/config.toml
          echo "Restart Containerd"
          sudo systemctl restart containerd
          echo "Sleep for 60 Seconds"
          sleep 60
          echo "Check to see whether containerd is running"
          sudo systemctl is-active containerd


          chmod +x test-setup.sh
          randomid=$(openssl rand -hex 8 | tr -d '\n')
          export SkrClientKID=kafka-demo-pipeline-${randomid}
          export SOURCE_ID=confidential-container-demos-${randomid}
          bash test-setup.sh $SkrClientKID $AZURE_AKV_RESOURCE_ENDPOINT
          echo "skr-client-kid=${SkrClientKID}" >> $GITHUB_OUTPUT



