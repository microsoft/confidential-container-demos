name: Deploy Kafka Test

on:
  workflow_call:
    inputs:
      cluster-name:
        required: true
        description: "AKS Cluster Name"
        type: string
      key-release-image: 
        required: true 
        description: "The image of the SKR sidecar to use"
        type: string
      consumer-image: 
        description: "Consumer Image"
        required: true
        type: string
      producer-image: 
        description: "Producer Image"
        required: true
        type: string
      repo-type:
        description: "Azure Container Registry to push the image to"
        required: true
        type: string
      workflow-id:
        description: "Workflow ID"
        required: true
        type: string
    outputs:
      skr-client-kid:
        description: SKR key id
        value: ${{ jobs.deploy-kafka.outputs.skr-client-kid }}
jobs:
  deploy-kafka:
    name: Deploy Kafka Test
    runs-on: ubuntu-latest
    outputs:
      skr-client-kid: ${{ steps.run-workload.outputs.skr-client-kid }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Public Azure Container Registry
        if: github.event_name != 'pull_request'
        run: az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }}

            
      - name: Install Dependencies 
        id: install-dependencies 
        run: |
            result=$(az extension list -o table  2>&1 || true)
            if [[ $result == *"confcom"* ]]; then
              echo "confcom already installed, upgrading confcom version."
              az extension update --name confcom
            else
              echo "confcom extension not found. Installing confcom..."
              az extension add --name confcom
            fi

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --fail-with-body 
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin
            kubectl version 2>&1 || true

      - name: Run Workload
        env:
          AZURE_AKV_RESOURCE_ENDPOINT: ${{ secrets.SKR_CLIENT_AKV_ENDPOINT }}
          MAA_ENDPOINT: ${{ secrets.SKR_CLIENT_MAA_ENDPOINT }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }} 
          SIDECAR_IMAGE: ${{ inputs.key-release-image }}
          CONSUMER_IMAGE: ${{ (github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_URL) || secrets.AZURE_REGISTRY_URL }}/${{ inputs.consumer-image }}
          PRODUCER_IMAGE: ${{ (github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_URL) || secrets.AZURE_REGISTRY_URL }}/${{ inputs.producer-image }}
        id: run-workload
        run: | 
          export CONSUMER_IMAGE=accsamplesmcr.azurecr.io/public/acc/samples/kafka/consumer:2.0
          az aks get-credentials --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP  --overwrite-existing
          cd main/kafka
          chmod +x test-setup.sh
          randomid=$(openssl rand -hex 8 | tr -d '\n')  
          export SkrClientKID=kafka-demo-pipeline-${randomid}
          bash test-setup.sh $SkrClientKID $AZURE_AKV_RESOURCE_ENDPOINT
          echo "skr-client-kid=${SkrClientKID}" >> $GITHUB_OUTPUT

          
      
