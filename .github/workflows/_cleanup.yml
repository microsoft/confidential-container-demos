name: Cleanup a Single AKS Cluster for a Pipeline Run

on:
  workflow_call:
    inputs:
      cluster-name:
        required: false
        description: AKS Cluster Name
        type: string
      skr-client-kid:
        required: false
        description: SKR key id
        default: "default-skr-client-kid"
        type: string
      debug:
        description: "Debug Flag"
        default: false
        required: false
        type: boolean
      test-name:
        description: "Test Name"
        required: true
        type: string
  schedule:
    - cron: "0 0 * * *"

jobs:
  cleanup-running-acis:
    name: Cleanup Running Container Groups
    runs-on: ubuntu-latest
    if: ${{ inputs.debug == false || false }}
    env: 
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }} 
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete All Container Groups
        run: |
          RUNNING_CONTAINERS=$(az container list \
          --resource-group $RESOURCE_GROUP \
          --query "[?!starts_with(name, 'uptime-')]")

          for container in $(echo $RUNNING_CONTAINERS | jq -r '.[].id'); do
              echo "Deleting container group: ${container}"
              az resource delete --ids ${container}
          done

  cleanup-failed-acis:
    name: Cleanup Failed Container Groups
    runs-on: ubuntu-latest
    if: ${{ inputs.debug == false || false }}
    env: 
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }} 
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete Failed Container Groups
        run: |
          NON_RUNNING_CONTAINERS=$(az container list \
          --resource-group $RESOURCE_GROUP \
          --query "[?provisioningState=='Failed' || provisioningState=='Unhealthy']")

          for container in $(echo $NON_RUNNING_CONTAINERS | jq -r '.[].id'); do
          echo "Deleting container group: ${container}"
          az resource delete --ids ${container}
          done

  cleanup_registry:
    name: Cleanup Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Cleanup Hello World ACI Images
        if: ${{ inputs.test-name == 'hello-world-aci' }}
        run: |
          # adding || true so that it doesn't fail if the image doesn't exist (i.e. helloworld didn't run)
          az acr login --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }}
          az acr repository delete --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/aci/helloworld:${{ github.sha }} --yes || true

      - name: Cleanup Hello World AKS Images
        if: ${{ inputs.test-name == 'hello-world-aks' }}
        run: |
          # adding || true so that it doesn't fail if the image doesn't exist (i.e. helloworld didn't run)
          az acr login --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }}
          az acr repository delete --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/aks/helloworld:${{ github.sha }} --yes || true

      - name: Cleanup Kafka Images
        if: ${{ inputs.test-name == 'kafka' }}
        run: |
          # adding || true so that it doesn't fail if the image doesn't exist (i.e. kafka didn't run)
          az acr login --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }}
          az acr repository delete --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/kafka/consumer:${{ github.sha }} --yes || true
          az acr repository delete --name ${{ github.event_name == 'pull_request' && secrets.TEST_AZURE_REGISTRY_NAME || secrets.AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/kafka/producer:${{ github.sha }} --yes || true

  cleanup-cluster:
    name: Clean Up Cluster
    runs-on: ubuntu-latest
    if: ${{ inputs.cluster-name != '' }}
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Clean Up
        id: cleanup
        env: 
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          SKR_CLIENT_KID: ${{ inputs.skr-client-kid }}
        run: | 
          # cannot rely on the job success/fail indicator to determine whether the SKR_CLIENT_KID exists or not so attempt to delete anyway 
          az keyvault key delete --vault-name kafka-test-pipeline-akv --name $SKR_CLIENT_KID 2>&1 || true
          result=$(az aks list -g $RESOURCE_GROUP --query "[].name" -o tsv)

          max_retries=5
          retries=0
          while [ $retries -lt $max_retries ]; do
              echo "Querying for cluster state"
              set -e
              EXIT_CODE=0
              clusterstate=$(az aks show -g $RESOURCE_GROUP -n $CLUSTER_NAME --query 'provisioningState' -o tsv) || EXIT_CODE=$?
              if [[ $EXIT_CODE -eq 0 ]]; then
                # cluster still exists, try to delete
                if [[ $clusterstate == *"Succeeded"* ]]; then
                    echo "Returned result is $clusterstate"
                    echo "Cluster is ready to be deleted."
                    powerState=$(az aks show -g $RESOURCE_GROUP -n $CLUSTER_NAME --query "powerState.code" -o tsv)
                    if [[ $powerState != *"Stopped"* ]]; then
                      echo "Power state is $powerState, stopping"
                      az aks stop --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME 2>&1
                    fi
                    az aks delete --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --no-wait --yes
                elif [[ $clusterstate == *"Stopped"* ]] || [[ $clusterstate == *"Failed"* ]]; then
                    echo "Returned result is $clusterstate"
                    az aks delete --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --no-wait --yes
                else
                    echo "Returned cluster provisioning state is $clusterstate"
                    echo "Retrying in 3 minutes..."
                fi
                retries=$((retries+1))
                sleep 180
              else
                break # Exit the loop since the cluster no longer exists
              fi
          done
          if [ $retries -eq $max_retries ]; then
              echo "Attempted to delete 5 times without success."
              exit 1
          fi
