name: Cleanup

on:
  workflow_call:
  schedule:
    - cron: "0 0 * * *"

jobs:
  cleanup_registry:
    name: Cleanup Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      # - name: Set Subscription
      #   run: az account set --subscription ${{ secrets.AZURE_LAB_SUBSCRIPTION }}
            
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1.0.1
        with:
          login-server: ${{ secrets.AZURE_REGISTRY_URL }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Cleanup Registry
        run: |
          # The filter looks for at least one digit as a proxy for auto
          # generated tags
          az acr run \
            --cmd "acr purge --filter 'private/acc/samples/kafka/.*:.*' --ago 1d" \
            --registry ${{ secrets.AZURE_REGISTRY_URL }} \
            /dev/null

  cleanup-cluster:
    name: Clean Up
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Clean Up
        id: cleanup
        env: 
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
        run: | 
          result=$(az aks list -g $RESOURCE_GROUP --query "[].name" -o tsv)

          for name in $result 
          do
              max_retries=5
              retries=0
              while [ $retries -lt $max_retries ]; do
                  echo "Querying for cluster state"
                  set -e
                  EXIT_CODE=0
                  clusterstate=$(az aks show -g $RESOURCE_GROUP -n $name --query 'provisioningState' -o tsv) || EXIT_CODE=$?
                  if [[ $EXIT_CODE -eq 0 ]]; then
                    # cluster still exists, try to delete
                    if [[ $clusterstate == *"Succeeded"* ]]; then
                        echo "Returned result is $clusterstate"
                        echo "Cluster is ready to be deleted."
                        az aks stop --resource-group $RESOURCE_GROUP --name $name 2>&1
                        az aks delete --resource-group $RESOURCE_GROUP --name $name --no-wait --yes
                    elif [[ $clusterstate == *"Stopped"* ]] || [[ $clusterstate == *"Failed"* ]]; then
                        echo "Returned result is $clusterstate"
                        az aks delete --resource-group $RESOURCE_GROUP --name $name --no-wait --yes
                    else
                        echo "Returned cluster provisioning state is $clusterstate"
                        echo "Retrying in 3 minutes..."
                    fi
                    retries=$((retries+1))
                    sleep 180
                  else
                    break # Exit the loop since the cluster no longer exists
                  fi
              done
              if [ $retries -eq $max_retries ]; then
                  echo "The operation has been tried 5 times without success."
                  exit 1
              fi
          done