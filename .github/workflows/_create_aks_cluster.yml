name: Create AKS Cluster

on:
  workflow_call:
    inputs:
      demo-name:
        description: "Demo Name"
        required: true
        type: string
      workflow-id:
        description: "Workflow ID"
        required: true
        type: string
    outputs:
      cluster-name:
        description: "AKS Cluster Name"
        value: ${{ jobs.create-aks-cluster.outputs.cluster-name }}
  workflow_dispatch:
    inputs:
      workflow-id:
        description: "Workflow ID"
        required: true
        type: string

jobs:
  create-aks-cluster:
    name: Create AKS Cluster
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
    outputs:
      cluster-name: ${{ steps.create-aks-cluster.outputs.cluster-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        id: install-dependencies
        run: |
          result=$(az extension list -o table  2>&1 || true)
          if [[ $result == *"aks-preview"* ]]; then
            echo "aks-preview already installed, upgrading aks-preview version."
            az extension update --name aks-preview
          else
            echo "aks-preview extension not found. Installing aks-preview..."
            az extension add --name aks-preview
          fi

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create AKS Cluster
        id: create-aks-cluster
        if: steps.install-dependencies.outcome == 'success'
        env:
          CLUSTER_NAME: ${{ inputs.demo-name }}-${{ inputs.workflow-id }}
        run: |
          az aks create --resource-group $RESOURCE_GROUP \
          --name ${CLUSTER_NAME} \
          --os-sku AzureLinux \
          --node-vm-size Standard_DC4as_cc_v5 \
          --tags "Owner=accct" \
          --enable-oidc-issuer \
          --enable-workload-identity \
          --workload-runtime KataCcIsolation \
          --node-count 1 \
          --generate-ssh-keys \
          --auto-upgrade-channel patch \
          --node-os-upgrade-channel NodeImage

          echo "cluster-name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
